// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:zero_c/values/values.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: getValue('FIREBASE_WEB_APIKEY'),
    appId: getValue('FIREBASE_WEB_APPID'),
    messagingSenderId: getValue('FIREBASE_MESSAGINGSENDERID') ?? '',
    projectId: getValue('FIREBASE_PROJECTID'),
    authDomain: getValue('FIREBASE_AUTHDOMAIN'),
    storageBucket: getValue('FIREBASE_STORAGEBUCKET'),
    measurementId: getValue('FIREBASE_WEB_MEASUREMENTID'),
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: getValue('FIREBASE_ANDROID_APIKEY'),
    appId: getValue('FIREBASE_ANDROID_APPID'),
    messagingSenderId: getValue('FIREBASE_MEASUREMENTID') ?? '',
    projectId: getValue('FIREBASE_PROJECTID'),
    storageBucket: getValue('FIREBASE_STORAGEBUCKET'),
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: getValue('FIREBASE_IOS_APIKEY'),
    appId: getValue('FIREBASE_IOS_APPID'),
    messagingSenderId: getValue('FIREBASE_MEASUREMENTID') ?? '',
    projectId: getValue('FIREBASE_PROJECTID'),
    storageBucket: getValue('FIREBASE_STORAGEBUCKET'),
    iosBundleId: getValue('FIREBASE_IOS_IOSBUNDLEID'),
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: getValue('FIREBASE_MACOS_APIKEY'),
    appId: getValue('FIREBASE_MACOS_APPID'),
    messagingSenderId: getValue('FIREBASE_MEASUREMENTID') ?? '',
    projectId: getValue('FIREBASE_PROJECTID'),
    storageBucket: getValue('FIREBASE_STORAGEBUCKET'),
    iosBundleId: getValue('FIREBASE_MACOS_IOSBUNDLEID'),
  );

  static FirebaseOptions windows = FirebaseOptions(
    apiKey: getValue('FIREBASE_WINDOWS_APIKEY'),
    appId: getValue('FIREBASE_WINDOWS_APPID'),
    messagingSenderId: getValue('FIREBASE_MESSAGINGSENDERID') ?? '',
    projectId: getValue('FIREBASE_PROJECTID'),
    authDomain: getValue('FIREBASE_AUTHDOMAIN'),
    storageBucket: getValue('FIREBASE_STORAGEBUCKET'),
    measurementId: getValue('FIREBASE_WINDOWS_MEASUREMENTID'),
  );
}